import { ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder, } from "discord.js";
import colors from "../../configs/colors.js";
import icons from "../../configs/icons.js";
import { client } from "../../index.js";
import kickMemberFromClan from "../../utils/api/clanMembersManagement.js";
import { sendApiPostRequest } from "../../utils/api/sendApiPostRequest.js";
import createErrorEmbed from "../../utils/errorHandling/createErrorEmbed.js";
import { addButtonsToMessage } from "../../utils/general/addButtonsToMessage.js";
import { convertSeconds } from "../../utils/general/convertSeconds.js";
import { getAdminAccessToken } from "./main.js";
const CustomRuntimeGroupMemberType = {
    0: "–ù–µ –≤ –∫–ª–∞–Ω–µ",
    1: "–ù–æ–≤–∏—á–æ–∫",
    2: "–£—á–∞—Å—Ç–Ω–∏–∫",
    3: "–ê–¥–º–∏–Ω",
    4: "–î–µ–π—Å—Ç–≤—É—é—â–∏–π –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å",
    5: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å",
};
function getRuntimeGroupMemberTypeName(value) {
    return CustomRuntimeGroupMemberType[value];
}
export async function handleManagementClanAction(interaction, clanMembers, deferredReply) {
    let index = clanMembers.length - 1;
    let userData = clanMembers[index];
    const makeNewEmbed = async () => {
        userData = clanMembers[index];
        const member = userData.discordId ? client.getCachedMembers().get(userData.discordId) : undefined;
        const embed = new EmbedBuilder().setColor(member ? colors.default : colors.kicked).setAuthor(member
            ? {
                name: `${member.displayName} - ${userData.displayName}`,
                iconURL: member.displayAvatarURL(),
                url: `https://www.bungie.net/en/Profile/${userData.platform}/${userData.bungieId}`,
            }
            : {
                name: userData.displayName,
                iconURL: icons.error,
                url: `https://www.bungie.net/en/Profile/${userData.platform}/${userData.bungieId}`,
            });
        const fields = [];
        const joinDate = userData && userData.joinDate !== 0 ? `<t:${userData.joinDate}>` : "N/A";
        const lastOnline = userData && userData.lastOnlineStatusChange !== 0 ? `<t:${userData.lastOnlineStatusChange}>` : "N/A";
        const isOnline = userData ? userData.isOnline : false;
        const onlineText = isOnline ? `üü¢ –≤ –∏–≥—Ä–µ` : `üî¥ ${lastOnline}`;
        const dataText = `${userData.rank !== 0 ? `–í—Å—Ç—É–ø–∏–ª –≤ –∫–ª–∞–Ω: ${joinDate}` : ""}\n–†–∞–Ω–≥: ${getRuntimeGroupMemberTypeName(userData.rank)}`;
        const userMention = member ? `<@${member.id}>` : "–ù–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ";
        fields.push({
            name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–ª–∞–Ω–µ",
            value: `–û–Ω–ª–∞–π–Ω: ${onlineText}\n${dataText}\n${userMention}`,
        });
        if (userData.UserActivityData) {
            fields.push({
                name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                value: `–í –≥–æ–ª–æ—Å–µ: ${convertSeconds(userData.UserActivityData.voice)}\n–°–æ–æ–±—â–µ–Ω–∏–π: ${userData.UserActivityData.messages}\n–†–µ–π–¥–æ–≤/–¥–∞–Ω–∂–µ–π: ${userData.UserActivityData.dungeons}/${userData.UserActivityData.raids}`,
            });
        }
        else {
            fields.push({
                name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                value: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            });
        }
        embed.addFields(fields);
        return embed;
    };
    const makeButtons = () => {
        const buttons = [
            new ButtonBuilder()
                .setCustomId("clanManagement_previous")
                .setDisabled(index === 0 ? true : false)
                .setEmoji("‚¨ÖÔ∏è")
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId("clanManagement_demote")
                .setDisabled(userData.rank <= 1 || userData.rank > 3 ? true : false)
                .setLabel("–ü–æ–Ω–∏–∑–∏—Ç—å")
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId("clanManagement_promote")
                .setDisabled(userData.rank > 2 || userData.rank === 0 ? true : false)
                .setLabel("–ü–æ–≤—ã—Å–∏—Ç—å")
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId("clanManagement_kick")
                .setDisabled(userData.rank === 0 || userData.rank > 3 ? true : false)
                .setLabel("–ò—Å–∫–ª—é—á–∏—Ç—å")
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId("clanManagement_next")
                .setDisabled(index === clanMembers.length - 1 ? true : false)
                .setEmoji("‚û°Ô∏è")
                .setStyle(ButtonStyle.Secondary),
        ];
        return buttons;
    };
    const setUserRank = async (rank) => {
        return await sendApiPostRequest({
            apiEndpoint: `/Platform/GroupV2/${process.env.GROUP_ID}/Members/${userData.platform}/${userData.bungieId}/SetMembershipType/${rank}/`,
            accessToken: await getAdminAccessToken(interaction),
            returnResponse: false,
        });
    };
    const demoteUser = async () => {
        const userRank = userData.rank;
        if (userRank <= 1 || userRank > 3) {
            const embed = new EmbedBuilder()
                .setColor(colors.error)
                .setAuthor({ name: "–≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å", iconURL: icons.error });
            return interaction.followUp({ embeds: [embed], ephemeral: true });
        }
        const response = await setUserRank(userRank - 1);
        let embed = new EmbedBuilder();
        if (response.ErrorCode === 1) {
            embed.setColor(colors.success).setAuthor({ name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–æ–Ω–∏–∂–µ–Ω", iconURL: icons.success });
            userData.rank = userRank - 1;
            clanMembers[index] = userData;
            updateMessage(true);
        }
        else {
            embed.setColor(colors.error).setAuthor({ name: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è", iconURL: icons.error });
            console.error("[Error code: 1902]", response);
        }
        return interaction.followUp({ embeds: [embed], ephemeral: true });
    };
    const promoteUser = async () => {
        const userRank = userData.rank;
        if (userRank === 0 || userRank > 2) {
            const embed = new EmbedBuilder()
                .setColor(colors.error)
                .setAuthor({ name: "–≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å", iconURL: icons.error });
            return interaction.followUp({ embeds: [embed], ephemeral: true });
        }
        const response = await setUserRank(userRank + 1);
        let embed = new EmbedBuilder();
        if (response.ErrorCode === 1) {
            embed.setColor(colors.success).setAuthor({ name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–æ–≤—ã—à–µ–Ω", iconURL: icons.success });
            userData.rank = userRank + 1;
            clanMembers[index] = userData;
            updateMessage(true);
        }
        else {
            embed.setColor(colors.error).setAuthor({ name: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–≤—ã—à–µ–Ω–∏—è", iconURL: icons.error });
            console.error("[Error code: 1903]", response);
        }
        return interaction.followUp({ embeds: [embed], ephemeral: true });
    };
    const kickUser = async (i) => {
        userData.rank = 0;
        await kickMemberFromClan(userData, i);
    };
    const updateMessage = async (fromCollector = false) => {
        const messageData = {
            embeds: [await makeNewEmbed()],
            components: addButtonsToMessage(makeButtons()),
            ...(fromCollector ? {} : { ephemeral: true }),
        };
        if (fromCollector) {
            await interaction.editReply(messageData);
        }
        else {
            return messageData;
        }
    };
    await deferredReply;
    const messageOptions = (await updateMessage());
    const message = await interaction.editReply(messageOptions);
    const collector = interaction.channel.createMessageComponentCollector({
        message,
        filter: (i) => i.user.id === interaction.user.id,
        idle: 1000 * 60 * 5,
        componentType: ComponentType.Button,
    });
    collector.on("collect", async (i) => {
        const deferredReply = i.customId === "clanManagement_kick" ? i.deferReply({ ephemeral: true }) : i.deferUpdate();
        try {
            switch (i.customId) {
                case "clanManagement_previous":
                    index = index === 0 ? index : index - 1;
                    await updateMessage(true);
                    break;
                case "clanManagement_next":
                    index = index === clanMembers.length - 1 ? index : index + 1;
                    await updateMessage(true);
                    break;
                case "clanManagement_demote":
                    await demoteUser();
                    break;
                case "clanManagement_promote":
                    await promoteUser();
                    break;
                case "clanManagement_kick":
                    await deferredReply;
                    await kickUser(i);
                    break;
                default:
                    break;
            }
        }
        catch (error) {
            console.error("[Error code: 1904]", error);
            const messageData = createErrorEmbed(error);
            await deferredReply;
            await i.followUp({ ...messageData, ephemeral: true });
        }
    });
    collector.on("end", () => interaction.deleteReply());
}
//# sourceMappingURL=management.js.map